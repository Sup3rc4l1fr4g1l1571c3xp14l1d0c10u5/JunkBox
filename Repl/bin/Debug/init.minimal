
(* object *)

external equal: ('a * 'a)   -> bool = "equal";;

let ( =  ) lhs rhs = equal (lhs, rhs);;
let ( <> ) lhs rhs = if equal (lhs, rhs) then false else true;;

external istuple: 'a   -> bool = "istuple";;

(* int *)

external add: (int * int) -> int = "add";;
external sub: (int * int) -> int = "sub";;
external mul: (int * int) -> int = "mul";;
external div: (int * int) -> int = "div";;
external mod: (int * int) -> int = "mod";;

let ( + ) lhs rhs = add (lhs, rhs);;
let ( - ) lhs rhs = sub (lhs, rhs);;
let ( * ) lhs rhs = mul (lhs, rhs);;
let ( / ) lhs rhs = div (lhs, rhs);;
let ( % ) lhs rhs = mod (lhs, rhs);;

let ( ~+ ) arg = 0 + arg ;;
let ( ~- ) arg = 0 - arg ;;

external lt: (int * int) -> bool = "lt";;
external le: (int * int) -> bool = "le";;
external gt: (int * int) -> bool = "gt";;
external ge: (int * int) -> bool = "ge";;

let ( <  ) lhs rhs = lt (lhs, rhs);;
let ( <= ) lhs rhs = le (lhs, rhs);;
let ( >  ) lhs rhs = gt (lhs, rhs);;
let ( >= ) lhs rhs = ge (lhs, rhs);;

(* list *)

external cons: 'a * ('a list) -> ('a list) = "cons";;
external head: ('a list) -> 'a = "head";;
external tail: ('a list) -> ('a list) = "tail";;

let ( :: ) x xs = cons (x, xs);;

(* option *)

external get: 'a option -> 'a = "get";;

(* tuple  *)

external field_: ('a * int) -> 'b = "field";;
let field f i = field_ (f,i);;

external size: 'a -> int = "size";;


