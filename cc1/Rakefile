OUTDIR = 'result'
GCC    = 'gcc'
#MYCC   = '../bin/debug/AnsiCParser.exe'
MYCC   = '../../bin/debug/cc1.exe'

SRCS    = FileList['*.c']
EXPECTS = SRCS.ext('expect')
RESULTS = SRCS.ext('result')
STATUSES= SRCS.ext('expect.status')
TEMP    = 'tmp'

directory TEMP

def exec(cmd)
  if File::ALT_SEPARATOR
    cmd = cmd.gsub(File::SEPARATOR) { File::ALT_SEPARATOR }
  end
  sh cmd
end

def exec2(cmd)
  if File::ALT_SEPARATOR
    cmd = cmd.gsub(File::SEPARATOR) { File::ALT_SEPARATOR }
  end
  puts cmd
  system cmd
  return $?.exitstatus
end

rule '.expect' => '.c' do |t|
  cd TEMP do
    exec "#{GCC} -mno-ms-bitfields -o #{t.name}.exe ../#{t.prerequisites[0]}  -mwindows"
    arg = File.exists?("../#{t.name.ext('arg')}") ? IO.readlines("../#{t.name.ext('arg')}").map(&:chomp).join(' ') : ""
    ret = exec2 "./#{t.name}.exe #{arg} > ../#{t.name} 2>&1"
    system "echo #{ret} > ./#{t.name}.status"
  end
end

rule '.result' => '.c' do |t|
  Rake::Task[t.name.ext('expect')].invoke()
  cd TEMP do
    exec "#{GCC} -mno-ms-bitfields -std=c99 -D\"__attribute__(x)=\" -D\"__extension__=\" -D\"__inline__=\" -D\"__inline=\" -D\"__restrict__=\" -D\"__cc1__\" -E ../#{t.prerequisites[0]} > #{t.name.ext('i')}"
    exec "../#{MYCC} -console-output-encoding utf-8 -o #{t.name.ext('s')} -ast #{t.name.ext('ast')} #{t.name.ext('i')}"
    exec "#{GCC} -mno-ms-bitfields -g -o #{t.name.ext('exe')} #{t.name.ext('s')}"
    arg = File.exists?("../#{t.name.ext('arg')}") ? IO.readlines("../#{t.name.ext('arg')}").map(&:chomp).join(' ') : ""
    ret = exec2 "./#{t.name.ext('exe')} #{arg} > #{t.name.ext('output')} 2>&1"
    system "echo #{ret} > #{t.name.ext('output')}.status"
    sh "diff -u #{t.name.ext('output')} ../#{t.name.ext('expect')} > ../#{t.name} 2>&1"
    sh "diff -u #{t.name.ext('output')}.status ./#{t.name.ext('expect')}.status >> ../#{t.name} 2>&1"
  end
end

task :test => [TEMP, RESULTS].flatten

task :clean do
  rm_rf TEMP
  rm_rf RESULTS
  rm_rf STATUSES
end

task :clobber do
  rm_rf TEMP
  rm_rf RESULTS
  rm_rf STATUSES
  rm_rf EXPECTS
end
