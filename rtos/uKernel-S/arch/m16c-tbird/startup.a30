;   Redistribution and use in source and binary forms, with or without
;   modification, are permitted provided that the following conditions are met:
;
;   * Redistributions of source code must retain the above copyright
;     notice, this list of conditions and the following disclaimer.
;
;   * Redistributions in binary form must reproduce the above copyright
;     notice, this list of conditions and the following disclaimer in
;     the documentation and/or other materials provided with the
;     distribution.
;
;   * Neither the name of the copyright holders nor the names of
;     contributors may be used to endorse or promote products derived
;     from this software without specific prior written permission.
;
;   THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS"
;   AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
;   IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE
;   ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE
;   LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR
;   CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF
;   SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS
;   INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN
;   CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)
;   ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE
;   POSSIBILITY OF SUCH DAMAGE.

;/**
; * @file
; * @brief		ブートローダの定義
; * @author		Kazuya Fukuhara
; * @date		2010/09/04 19:46:15	作成
; */

;********************************************************************
; ■ RAM初期化用のセクション情報
	.SECTION	 data_NE, DATA		; 初期値つき変数（偶数バイトサイズ）
	.SECTION	 data_NO, DATA		; 初期値つき変数（奇数バイトサイズ）
	.SECTION	  bss_NE, DATA		; 初期値なし変数（偶数バイトサイズ）
	.SECTION	  bss_NO, DATA		; 初期値なし変数（奇数バイトサイズ）
	.SECTION	data_NEI, ROMDATA	; 初期値なし変数の初期値（偶数バイトサイズ）
	.SECTION	data_NOI, ROMDATA	; 初期値なし変数の初期値（奇数バイトサイズ）
;********************************************************************

;********************************************************************
; ■スタートアップセクション
	.SECTION	program, CODE	; 以降はプログラムセクションの定義
;********************************************************************

;********************************************************************
; ■レジスタアドレスに別名設定 (mjj06b0011_m16c62aum.pdf PP.16より) 
PM0		.EQU	0004h	;; プロセッサモードレジスタ0 (PM0:0004h)
PM1		.EQU	0005h	;; チップセレクト制御レジスタ (PM1:0005h) 
CM0		.EQU	0006h	;; システムクロック制御レジスタ0(CM0:0006h) 
CM1		.EQU	0007h	;; システムクロック制御レジスタ1(CM1:0007h) 
CSR		.EQU	0008h	;; プロテクトレジスタ (PRCR:0008h) 
PRCR	.EQU	000Ah	;; プロテクトレジスタ (PRCR:000Ah)

;********************************************************************
; スタートアップコード
startup:
	.GLB	startup				;; 外部に公開

	;; 割り込み禁止
	fclr	I
	
	;; 割り込みベクタのアドレスを設定
	ldintb	#0FBD00h

	;; プロテクトレジスタに BYTE 0x02 を設定
	mov.b	#02h,	PRCR
	
	;; プロセッサモードレジスタ0 に BYTE 0x41 (41h) を設定
	;; 0x40 : ポートP40〜P43の機能はポート機能
	;; 0x01 : プロセッサモードはメモリ拡張モード
	mov.b	#41h,	PM0

	;; プロセッサモードレジスタ1 に BYTE 0x00 (00h) を設定
	;; 内部RAM領域15Kバイト以下、内部ROM領域192Kバイト以下
	mov.b	#00h,	PM1
	
	; チップセレクト制御レジスタ に BYTE 0x08 (08h) を設定
	;;; CS3出力許可
	mov.b	#08h,	CSR
	
	;; プロテクトレジスタ に BYTE 0x00 (00h) を設定
	mov.b	#00h,	PRCR
	
	
	;********************************************************************
	;; Ｃ言語側の変数の初期値を設定する
	
	;; セクションをコピーするマクロ
	SECCPY	.MACRO src dest
		.LOCAL EXIT
		mov.b	#(topof  src  >>     16 ),	R1H	; R1Hに転送元番地上位４ビットを設定
		mov.w	#(topof  src  &  0FFFFh ), 	A0	; A0に転送元番地下位16ビットを設定
		mov.w	#(topof  dest &  0FFFFh ),	A1	; A1に転送先番地を設定
		mov.w	#(sizeof dest			),	R3	; R3に転送サイズを設定
		mov.w	R3 ,	R2						; 2バイトずつ転送するので、R2に値を保存した上で
		shl.w	#-1,	R3						; 転送回数は転送サイズを1/2した値となる
		smovf.w									; 2バイトづつ転送
		btst	0,		R2						; R2の下位０ビットをテストする
		jz		EXIT							; テスト結果で偶数の場合はコピー処理を行わない。
		mov.w	#1,		R3						; 転送回数を１回に設定して
		smovf.b									; バイトコピー
	EXIT:
	.ENDM

	;; セクションをゼロクリアするマクロ
	SECCLR	.MACRO dest
		.LOCAL EXIT
		mov.w	#0                     ,	R0	; R0に転送データを設定
		mov.w	#(topof  dest & 0FFFFh),	A1	; A1に転送先番地を設定
		mov.w	#(sizeof 	dest         ),	R3	; R3に転送サイズを設定
		mov.w	R3 ,	R2						; 2バイトずつ転送するので、R2に値を保存した上で
		shl.w	#-1,	R3						; 転送回数は転送サイズを1/2した値となる
		sstr.w									; R0の値を2バイトづつ転送
		btst	0,		R2						; R2の下位０ビットをテストする
		jz		EXIT							; テスト結果で偶数の場合は転送処理を行わない。
		mov.w	#1,		R3						; 転送回数を１回に設定して
		sstr.b									; 1バイト転送
	EXIT:
	.ENDM

	;; data_NE, data_NO は 初期値を持つグローバル（static）変数が格納される領域
	;; リンカから領域は教えてもらえるので、メモリコピーするだけで初期化ができる。
	SECCPY	data_NEI, data_NE		;; data_NEにdata_NEIを転送して初期化
	SECCPY 	data_NOI, data_NO		;; data_NOにdata_NOIを転送して初期化

	;; bss_NE, bss_NO は 初期値を持たないグローバル（static）変数
	;; リンカから領域は教えてもらえるので、0でfillするだけで初期化ができる。
	SECCLR	bss_NE					;; bss_NEに#0を転送して初期化
	SECCLR	bss_NO					;; bss_NOに#0を転送して初期化

	;********************************************************************

	; 初期化が終了したのでmainを呼び出す (main へジャンプ)
	.GLB	_main
	jmp		_main


;********************************************************************
; ■halt命令
	.GLB	_halt
_halt:
	fclr	I		;; 割り込み禁止
halt:
	nop
	jmp		halt

;********************************************************************

;********************************************************************
; ■割り込み発生を受け取る入り口コード

MKOUTINT .MACRO id
external_interrupt_@id@_entry:
	.GLB	external_interrupt_@id@_entry	; 外部に公開
	fclr	I						; 割り込みを禁止する
	.GLB	_ExtIntID				; 外部変数
	mov.b	#id, _ExtIntID			; 割り込み番号を保存
	.GLB	_external_interrupt		; 外部関数
	jmp		_external_interrupt		; トランポリン側へ移動
.ENDM

MKOUTINT 0
MKOUTINT 1
MKOUTINT 2
MKOUTINT 3
MKOUTINT 4
MKOUTINT 5
MKOUTINT 6
MKOUTINT 7
MKOUTINT 8
MKOUTINT 9
MKOUTINT 10
MKOUTINT 11
MKOUTINT 12
MKOUTINT 13
MKOUTINT 14
MKOUTINT 15
MKOUTINT 16
MKOUTINT 17
MKOUTINT 18
;MKOUTINT 19
;MKOUTINT 20
;MKOUTINT 21
MKOUTINT 22
MKOUTINT 23
MKOUTINT 24
MKOUTINT 25
MKOUTINT 26
MKOUTINT 27
MKOUTINT 28
MKOUTINT 29
MKOUTINT 30
MKOUTINT 31

;********************************************************************
.END
;********************************************************************

